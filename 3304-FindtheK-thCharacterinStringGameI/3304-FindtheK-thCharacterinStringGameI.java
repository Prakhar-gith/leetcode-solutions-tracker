// Last updated: 7/4/2025, 12:59:17 AM
class Solution {
    /**
     * Finds the k-th character in a recursively generated string game.
     *
     * The string starts as "a". In each step, a new string is generated by
     * shifting every character of the current string to the next in the alphabet
     * (with 'z' wrapping to 'a'), and this new string is appended to the current one.
     *
     * The length of the string doubles in each step (1 -> 2 -> 4 -> 8 -> ...).
     * Since the constraint for k is small (k <= 500), we can directly simulate
     * the string generation process until the string's length is at least k.
     *
     * @param k The 1-based index of the character to find.
     * @return The character at the k-th position.
     */
    public char kthCharacter(int k) {
        // Start with the initial string "a".
        StringBuilder word = new StringBuilder("a");

        // Continue generating the string until its length is at least k.
        while (word.length() < k) {
            StringBuilder nextPart = new StringBuilder();
            
            // Generate the next part of the string based on the current word.
            for (int i = 0; i < word.length(); i++) {
                char currentChar = word.charAt(i);
                // Shift the character to the next one in the alphabet, wrapping from 'z' to 'a'.
                char nextChar = (char) ('a' + (currentChar - 'a' + 1) % 26);
                nextPart.append(nextChar);
            }
            
            // Append the newly generated part to the word.
            word.append(nextPart);
        }

        // Return the k-th character (using 0-based indexing for the string).
        return word.charAt(k - 1);
    }
}